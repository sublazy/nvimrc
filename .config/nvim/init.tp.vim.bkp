set runtimepath+=~/.vim,~/.vim/after
set packpath+=~/.vim

" Vundle configuration =======================================================================
   filetype off                   " required!
   set rtp+=~/.vim/bundle/Vundle.vim/
   call vundle#begin()

   " Prevent :PluginClean from removing Vundle
   " Plugin 'VundleVim/Vundle.vim'

   "" plugins on GitHub
   Plugin 'Lokaltog/vim-easymotion'
   Plugin 'editorconfig/editorconfig-vim'
   Plugin 'tpope/vim-fugitive'
   Plugin 'airblade/vim-gitgutter'
   Plugin 'ludovicchabant/vim-gutentags'
   Plugin 'shougo/denite.nvim'
   Plugin 'qpkorr/vim-bufkill'
   Plugin 'xolox/vim-misc'
   Plugin 'xolox/vim-notes'
   Plugin 'itchyny/lightline.vim'
   Plugin 'milkypostman/vim-togglelist'
   Plugin 'simeji/winresizer'
   Plugin 'godlygeek/tabular'
   Plugin 'yurifury/hexhighlight'
   "Plugin 'jceb/vim-orgmode'
   "Plugin 'vim-scripts/The-NERD-Commenter'

   "" plugins from http://vim-scripts.org/vim/scripts.html
   Bundle 'bufferlist.vim'
   "Bundle 'grep.vim'

   call vundle#end()            " required
   filetype plugin indent on    " required
   " To ignore plugin indent changes, instead use:
   " filetype plugin on
" =======================================================================

set nobackup
set noswapfile

" Gives some margin lines when scrolling up/down with cursor.
set scrolloff=3

" Don't break lines in the middle of a word.
set linebreak

set expandtab        " convert tabs to spaces.
set tabstop=4
set softtabstop=4
set shiftwidth=4

set ignorecase
set smartcase

set termguicolors
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
colorscheme fortune
set background=dark
set cursorline
set number

" Open command line without Shift key.
nnoremap ; :

inoremap <F1>     <nop>
nnoremap <left>   <nop>
nnoremap <right>  <nop>
nnoremap <BS>     <nop>
nnoremap <C-H>    <nop>
nnoremap <return> <nop>

let mapleader = "\<space>"

nnoremap <leader>ve :e! $MYVIMRC<CR>
nnoremap <leader>vr :source $MYVIMRC<CR>

nnoremap <leader>fi :set formatoptions+=a<CR>
nnoremap <leader>fo :set formatoptions-=a<CR>
nnoremap <leader>q :q!<CR>
nnoremap <leader>x :x!<CR>
nnoremap <leader>w :w!<CR>
nnoremap <leader>fs :w!<CR>

nnoremap <leader>pl :PluginList<CR>
nnoremap <leader>pi :PluginInstall<CR>
nnoremap <leader>pc :PluginClean<CR>
nnoremap <leader>pu :PluginUpdate<CR>
nnoremap <leader>pd :PluginDocs<CR>

nnoremap <leader>tl :tabnext<CR>
nnoremap <leader>th :tabprev<CR>
nnoremap <leader>tt :tabnew<CR>
nnoremap <leader>tx :tabclose<CR>
nnoremap <leader>ti :tabs<CR>

" bufkill, leave current window intact
nnoremap <leader>bd :BD<CR>

noremap vo viw

" BufferList config
hi BufferSelected term=NONE ctermfg=white ctermbg=blue cterm=bold
hi BufferNormal term=NONE ctermfg=white ctermbg=black cterm=NONE
nnoremap <silent> <leader>bl :call BufferList()<CR>
let g:BufferListWidth = 20
let g:BufferListMaxWidth = 40

" New settings (after switching to neovim).
" -----------------------------------------------------------------------------

" Add all subdirs of the current working dir to path (recursively).
set path+=**

" Use system clipboard for yanking and pasting.
set clipboard+=unnamedplus

" Selection bar/menu used e.g. by :find command.
set wildmenu

" Source the init.vim file after saving it
"if has("autocmd")
"    if !exists("autocommands_loaded")
"        let autocommands_loaded = 1
"        autocmd bufwritepost init.vim source $MYVIMRC
"    endif
"endif

" shortcuts for windows {{{
" <http://stackoverflow.com/questions/9092982/mapping-c-j-to-something-in-vim>
let g:C_Ctrl_j = 'off'
let g:BASH_Ctrl_j = 'off'
nnoremap <M-h> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-l> <C-w>l

nnoremap <leader>wh <C-w>h
nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k
nnoremap <leader>wl <C-w>l
"}}}

" Exit to normal mode in terminal.
tnoremap <C-o> <C-\><C-n>

tnoremap <A-h> <C-\><C-n><C-w>h
tnoremap <A-j> <C-\><C-n><C-w>j
tnoremap <A-k> <C-\><C-n><C-w>k
tnoremap <A-l> <C-\><C-n><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

nnoremap <A-C-j> <C-e>
nnoremap <A-C-k> <C-y>

nnoremap <leader>wi :vsp<CR>
nnoremap <leader>w- :sp<CR>
nnoremap <leader>wr :WinResizerStartResize<CR>

" vim-togglelist: remove default mappings
let g:toggle_list_no_mappings = 1

" toggles
nnoremap <leader>ln :set number!<CR>
nnoremap <leader>lg :set hlsearch!<CR>
nnoremap <leader>lm :call ToggleQuickfixList()<CR>
nnoremap <leader>ll :call ToggleLocationList()<CR>
nnoremap <leader>lv :GitGutterToggle<CR>
" ~f~ autoformatting
" ~s~ soft wrapping of long lines
" ~h~ hard wrapping of long lines
" ~g~ grep results - highlighting of match occurences
" ~n~ line numbers in the fringe
" ~r~ ruler (last column indicator)

" QuickFix list navigation
" make; down
nnoremap <leader>mj :cnewer<CR>
" make; up
nnoremap <leader>mk :colder<CR>

" winresizer configuration
let g:winresizer_vert_resize = 1
let g:winresizer_horiz_resize = 1
let g:winresizer_finish_with_escape = 1
let g:winresizer_start_key = '<C-?>'

nnoremap <C-[> <nop>
nnoremap <C-]> <nop>

" Bubble lines up/down
nnoremap - ddp
nnoremap _ ddkP

source ~/.config/nvim/keymap.vim

" Denite customization
" ---------------------------------------------------------------------

" '_' means all buffers
call denite#custom#option('_', 'highlight_mode_normal', 'CursorLine')

" Change mappings.
call denite#custom#map(
      \ 'insert',
      \ '<C-j>',
      \ '<denite:move_to_next_line>',
      \ 'noremap'
      \)
call denite#custom#map(
      \ 'insert',
      \ '<C-k>',
      \ '<denite:move_to_previous_line>',
      \ 'noremap'
      \)


nnoremap <leader>fr :Denite file_rec<CR>
nnoremap <leader>ff :Denite file_rec -mode=normal<CR>
"nnoremap <leader>bb :Denite buffer:! -mode=normal<CR>
nnoremap <leader>bb :Denite buffer<CR>
nnoremap <leader>d :Denite<space>
nnoremap <leader>dh :Denite help<CR>

nnoremap <leader>8
    \ :<C-u>DeniteCursorWord
    \ grep:. -mode=normal
    \ <CR>

nnoremap <leader>dt :<C-u>Denite tag:. -mode=normal<CR>
nnoremap <leader>dt :<C-u>Denite grep:.::'msg_send' -mode=normal<CR>
nnoremap <leader>/ :<C-u>Denite grep:. -mode=normal<CR>
nnoremap <leader>hl :<C-u>Denite location_list -mode=normal -no-empty<CR>
nnoremap <leader>hs :<C-u>Denite history:search -mode=normal<CR>
nnoremap <leader>hc :<C-u>Denite history:cmd -mode=normal<CR>

" Easymotion customization
" ---------------------------------------------------------------------
let g:EasyMotion_grouping = 1
let g:EasyMotion_keys = 'xcvmbsghl.wertyuinodk,fj'
" let g:EasyMotion_grouping = 2
" let g:EasyMotion_keys = ' fjdkxcvmosghl.wertyuinb,'
"
let g:EasyMotion_smartcase = 1
" ---------------------------------------------------------------------

" Show syntax highlighting groups for word under cursor
nnoremap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Set external formatter for XML files
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null

set foldcolumn=0
